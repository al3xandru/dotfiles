#!/usr/bin/env bash

# List defined functions 
function funclist() {
    declare -f | grep "()" | egrep -v "^[_ \$]"
}

# iTerm2 tab title
function tabtitle() {
    local t=$1
    if [ -z "$t" ]; then
        t=$(basename $PWD)
    fi
    echo -e "\033];$t\007"
}

# backup a file
function backup() {
    cp -v "$1"{,.orig}
}

# Dropbox functions
function dropbox_conflicts() {
    local DROPBOXDIR="$HOME/Dropbox"
    local cmd="$1"
    if [ -z "$cmd" ]; then
        echo "Usage dropbox_conflicts [wc | ls | rm]"
    else
        local findcmd=`find "$DROPBOXDIR" \( -regex ".*/.* conflicted .*" -and \! -regex ".*/.dropbox.cache/.*" \)` 
        case $cmd in
            wc)
                echo "Found $(echo \"$findcmd\" | wc -l) conflicts"
                ;;
            ls)
                echo "$findcmd"
                ;;
            rm)
                local conflicted_files="$findcmd"
                if [ "$conflicted_files" != "" ]; then
                    echo "There are some conflicted files:"
                    echo "$conflicted_files"
                    read -p "Do you want to delete these conflict files? (y/n): "
                    if [ $REPLY = "y" ]; then
                        find "$DROPBOXDIR" \( -regex ".*/.* conflicted .*" -and \! -path "*/.dropbox.cache/*" \) -exec rm -vf {} \;
                    fi
                fi	
                ;;
            *)
                echo "Usage dropbox_conflicts wc | ls | rm"
                ;;
        esac
    fi
}

# Jump
# http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
export MARKPATH=$HOME/.marks
function cj() {
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark() {
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark() {
    rm -i "$MARKPATH/$1"
}
function marks() {
    # ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
    ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
}
# add tab completion for jump (alias cj)
_completejump() {
    local curw=${COMP_WORDS[COMP_CWORD]}
    #local wordlist=$(find $MARKPATH -type l | awk -F '/' '{print $NF}')
    #COMREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
    COMPREPLY=( $(compgen -W "$( ls $MARKPATH )" -- $curw) )
    return 0
}

complete -o "default" -o "nospace" -F _completejump cj unmark jump
# end jump

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [ -n "$@" ]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript
    else # pipe
        python -mjson.tool | pygmentize -l javascript
    fi
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
    # print a newline unless weâ€™re piping the output to another program
    if [ -t 1 ]; then
        echo # newline
    fi
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
    # print a newline unless weâ€™re piping the output to another program
    if [ -t 1 ]; then
        echo # newline
    fi
}

# Get a characterâ€™s Unicode code point
function codepoint() {
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
    # print a newline unless weâ€™re piping the output to another program
    if [ -t 1 ]; then
        echo # newline
    fi
}

# Find an application CFBundleIndentifier
function appid() {
    grep 'CFBundleIdentifier' -A1 "$1Contents/Info.plist" | sed s/string//g | sed s/key//g | sed s/[\<\>\/]//g
}

# Switch DNS
# function dnsswitch() {
#     local flushdns="1"
#     if [ -z "$1" ]; then
#         echo "Known options: aft, g(oogle), opendns"
#         flushdns="0"
#     else
#         case $1 in 
#             aft)
#                 echo "Switching DNS to AdFreeTime (aft)"
#                 sudo networksetup -setdnsservers Wi-Fi 192.169.71.180 208.110.81.51 192.254.74.201
#                 sudo networksetup -setdnsservers "USB Ethernet" 192.169.71.180 208.110.81.51 192.254.74.201
#                 sudo networksetup -setdnsservers "Thunderbolt Ethernet" 192.169.71.180 208.110.81.51 192.254.74.201
#                 ;;
#             g)
#                 echo "Switching DNS to Google (g)"
#                 sudo networksetup -setdnsservers Wi-Fi 8.8.8.8 8.8.4.4
#                 sudo networksetup -setdnsservers "USB ethernet" 8.8.8.8 8.8.4.4
#                 sudo networksetup -setdnsservers "Thunderbolt Ethernet" 8.8.8.8 8.8.4.4 
#                 ;;
#             opendns)
#                 echo "Switching DNS to Opendns (opendns)"
#                 sudo networksetup -setdnsservers Wi-Fi 208.67.222.222 208.67.220.220 208.67.220.222 208.67.222.220
#                 sudo networksetup -setdnsservers "USB ethernet" 208.67.222.222 208.67.220.220 208.67.220.222 208.67.222.220
#                 sudo networksetup -setdnsservers "Thunderbolt Ethernet" 208.67.222.222 208.67.220.220 208.67.220.222 208.67.222.220
#                 ;;
# #            ub)
# #                echo "Switching DNS to unblock-us.com (ub)"
# #                sudo networksetup -setdnsservers Wi-Fi 208.122.23.23 208.122.23.22
# #                sudo networksetup -setdnsservers "USB Ethernet" 208.122.23.23 208.122.23.22
# #                sudo networksetup -setdnsservers "Thunderbolt Ethernet" 
# #                ;;
# #            upc)
# #                echo "Switching DNS to UPC (upc)"
# #                sudo networksetup -setdnsservers Wi-Fi 95.77.94.88 78.96.7.88
# #                sudo networksetup -setdnsservers "USB Ethernet" 95.77.94.88 78.96.7.88
# #                sudo networksetup -setdnsservers "Thunderbolt Ethernet" 95.77.94.88 78.96.7.88
# #                ;;
#             *)
#                 echo "Resetting DNS to defaults"
#                 sudo networksetup -setdnsservers Wi-Fi empty
#                 sudo networksetup -setdnsservers "USB Ethernet" empty
#                 sudo networksetup -setdnsservers "Thunderbolt Ethernet" empty
#                 ;;
#         esac               
#     fi
#     if [ ${flushdns} = "1" ]; then
#         echo "Flushing the DNS cache"
#         sudo killall -HUP mDNSResponder
#     fi
# }
# alias switchdns=dnsswitch

# PYTHONPATH
function setpythonpath {
    if [ $(which pyenv) != "" ]; then
        export PYTHONPATH=.:$HOME/.pyenv/versions/$(pyenv version | cut -d " " -f1)/lib/python2.7/site-packages/
        echo PYTHONPATH=$PYTHONPATH
    fi
}

# Node.js NPM
# function nodejs_activate_npm {
#     export PATH=/usr/local/share/npm/bin:${PATH}
# }
# function nodejs_deactivate_npm {
#     IFS=':' read -a path_segments <<< "${PATH}"
#     local NEW_PATH=""
#     for ps in "${path_segments[@]}"; do
#         if [ "/usr/local/share/npm/bin" != "$ps" ]; then
#             if [ -z "$NEW_PATH" ]; then
#                 NEW_PATH=$ps
#             else
#                 NEW_PATH=$NEW_PATH:$ps
#             fi
#         fi
#     done
#     echo $NEW_PATH
# }

# image handling
# http://brettterpstra.com/2013/07/24/bash-image-tools-for-web-designers/
function imgsize() {
    local width height
    if [ -f "$1" ]; then
        height=$(sips -g pixelHeight "$1"|tail -n 1|awk '{print $2}')
        width=$(sips -g pixelWidth "$1"|tail -n 1|awk '{print $2}')
        echo "${width} x ${height}"
    else
        echo "Image file not found"
    fi
}

# GOPATH
function gopath {
    if [ -z "$1" ]; then
        unset GO15VENDOREXPERIMENT
        export GOPATH=~/.golang
    else
        local dirn
        if [ -d "$1" ]; then
            if [ "$1" = "." ]; then
                dirn=$(pwd -P)
            else
                dirn=$(cd $1; pwd -P)
            fi
            export GO15VENDOREXPERIMENT=1
            export GOPATH=${dirn}:$GOPATH
            export PATH=${dirn}/bin:$PATH
        fi
    fi
    go env
}

function goworkspace {
    if [ -z "$1" ]; then
        echo "Project name required"
    else
        mkdir -p "$1/"{bin,pkg,src}    
        cd "$1"
        gopath .
    fi
}

# function loopback {
#     local max i
#     if [ -z "$1" ]; then
#         echo "Usage loopback nr"
#     else
#         let max=$1+2
#         for((i=2;i<max; i++)); do
#             sudo ifconfig lo0 alias 127.0.0.$i up
#             echo "Loopback enabled on 127.0.0.$i"
#         done
#     fi
# }

# https://github.com/imwally/battstat

charging_icon="âš¡"     #  U+26A1 - Thunderbolt
discharging_icon="ðŸ”‹" # U+1F50B - Battery


battery() {
    _battery_print_help() {
        echo "usage: battstat [options] format"
        echo ""
        echo "options:"
        echo "    -h, --help                display help information"
        echo "    -c, --charging-icon       string to display in icon's place when battery is charging"
        echo "    -d, --discharging-icon    string to display in icon's place when battery is discharging"
        echo "    --percent-when-charged    only display percent when charged"
        echo ""
        echo "format:"
        echo "    {i}    display icon"
        echo "    {t}    display time remaining"
        echo "    {p}    display percent"
        echo ""
        echo "    Note: There must be a space between each format token."
    }

    _battery_exit_no_battery() {
        echo "battstat: no battery found"
        exit 1
    }

    _battery_get_darwin_details() {
        battery_details=$(pmset -g batt)

        # Exit if no battery exists.
        if [ -z "$(echo \"$battery_details\" | grep InternalBattery)" ]; then
        _battery_exit_no_battery
        fi
        
        charged=$(echo "$battery_details" | grep -w 'charged')
        charging=$(echo "$battery_details" | grep -w 'AC Power')
        discharging=$(echo "$battery_details" | grep -w 'Battery Power')
        time=$(echo "$battery_details" | grep 'InternalBattery' | awk '{print $5}' | grep '^[0-9]')
        percent=$(echo "$battery_details" | grep 'InternalBattery' | awk '{print $3}')
        percent=${percent%?} # Strips the last character (;)
    }

    _battery_get_linux_details() {
        battery_details=$(upower -i $(upower -e | grep 'BAT'))
        
        # Exit if no batery exists.
        if [ -z "$battery_details" ]; then
        _battery_exit_no_battery
        fi
        
        charged=$(echo "$battery_details" | grep 'state' | grep -w 'fully-charged')
        charging=$(echo "$battery_details" | grep 'state' | grep -w 'charging')
        discharging=$(echo "$battery_details" | grep 'state' | grep -w 'discharging')
        percent=$(echo "$battery_details"| grep 'percentage' | awk '{print $2}')
        
        case $(echo "$battery_details" | grep 'time' | awk '{print $5}') in
        "hours")
            hours=$(echo "$battery_details" | grep 'time' | awk '{print $4}' | cut -d . -f1)
            minutes=$(echo "$battery_details" | grep 'time' | awk '{print $4}' | cut -d . -f2)
            minutes=$(echo .$minutes \* 60 | bc -l | cut -d. -f1)
            ;;
        "minutes")
            minutes=$(echo "$battery_details" | grep 'time' | awk '{print $4}' | cut -d . -f1)
            ;;
        esac

        # Diplay 0 in the hours spot when only minutes remain.
        if [ -z "$hours" ]; then
        hours="0"
        fi

        # Prefix 0 when minutes drop below 10.
        if [ $(printf "%s" $minutes | wc -c) -eq '1' ]; then
        minutes="0$minutes"
        fi
        
        time=$hours:$minutes
    }

    _battery_get_openbsd_details() {
        battery_details=$(apm)

        # Exit if no battery exists.
        if [ -z "$battery_details" ]; then
        _battery_exit_no_battery
        fi

        charged=$(echo $battery_details | grep '100%')
        charging=$(echo $battery_details | grep -w 'state: connected')
        discharging=$(echo $battery_details | grep -w 'state: not connected')
        percent=$(echo $battery_details | grep 'Battery state' | awk '{print $4}')
        full_minutes=$(echo $battery_details | grep 'Battery state' | awk '{print $6}')
        hours=$(echo $(($full_minutes/60)))
        minutes=$(echo $(($full_minutes%60)))

        # Prefix 0 when minutes drop below 10.
        if [ $(printf "%s" $minutes | wc -c) -eq '1' ]; then
        minutes="0$minutes"
        fi
            
        time=$hours:$minutes
    }

    _battery_hide_percent_until_charged() {
        if [ -z "$charged" ]; then
        percent=""
        fi
    }   

    _battery_print_icon() {
        if [ ! -z "$charging" ] || [ ! -z "$charged" ]; then
        icon=$charging_icon
        elif [ ! -z "$discharging" ]; then
        icon=$discharging_icon
        fi

        printf " %s " $icon
    }

    _battery_print_time() {
        # Display "calc..." when calculating time remaining.
        if [ -z "$time" ] || [ $time = "0:00" ]; then
        time="calc..."
        fi

        # Hide time when fully charged.
        if [ ! -z "$charged" ]; then
        time=""
        fi
        
        if [ ! -z "$time" ]; then
        printf " %s " $time
        fi

    }

    _battery_print_percent() {
        if [ ! -z "$percent" ]; then
        printf " %s " $percent
        fi
    }

    if [ $# -gt 0 ] && ( [ $1 = "-h" ] || [ $1 = "--help" ] ); then
        _battery_print_help
        return
    fi

    case $(uname) in
        "Darwin")
        _battery_get_darwin_details
        ;;
        "Linux")
        _battery_get_linux_details
        ;;
        "OpenBSD")
        _battery_get_openbsd_details
        ;;
        *)
        echo "battstat: operating system not supported"
        return
        ;;
    esac

    if [ $# -eq 0 ]; then
        _battery_print_icon
        _battery_print_time
        _battery_print_percent
        printf "\n"
        return
    fi

    while test $# -gt 0; do
        case "$1" in
        --percent-when-charged)
            hide_percent_until_charged
            shift
            ;;
        -c|--charging-icon)
            charging_icon="$2"
            shift
            shift
            ;;
        -d|--discharging-icon)
            discharging_icon="$2"
            shift
            shift
            ;;
        {i})
            _battery_print_icon
            shift
            ;;
        {t})
            _battery_print_time
            shift
            ;;
        {p})
            _battery_print_percent
            shift
            ;;
        *)
            _battery_print_help
            break
            ;;
        esac
    done

    printf "\n"
}

# https://gist.github.com/kaleksandrov/3cfee92845a403da995e7e44ba771183
# globalprotect() {
#     case $# in
#         0)
#             echo "Usage: globalprotect {start|stop}"
#             return 1
#             ;;
#         1)
#             case $1 in
#                 start)
#                     echo "Starting GlobalProtect..."
#                     launchctl load /Library/LaunchAgents/com.paloaltonetworks.gp.pangpa.plist
#                     launchctl load /Library/LaunchAgents/com.paloaltonetworks.gp.pangps.plist
#                     echo "Done!"
#                     ;;
#                  stop)
#                     echo "Stopping GlobalProtect..."
#                     launchctl remove com.paloaltonetworks.gp.pangps
#                     launchctl remove com.paloaltonetworks.gp.pangpa
#                     echo "Done!"
#                     ;;
#                  *)
#                     echo "'$1' is not a valid verb."
#                     echo "Usage: $0 {start|stop}"
#                     return 2
#                     ;;
#               esac
#               ;;
#        *)
#           echo "Too many args provided ($#)."
#           echo "Usage: $0 {start|stop}"
#           return 3
#           ;;
#     esac
# }

# watch command
# http://daniel.lubarov.com/simple-watch-script-for-osx
# also brew install watch
function watch() {
    unset TIMER
    if test "$1" = "-n"; then
        TIMER=$2
        shift
        shift
    fi
    cmd="$@"
    echo "Command: $cmd"
    echo "Timer  : ${TIMER:-1}"
    while :; do
        clear
        echo "Every ${TIMER:-1}s: $cmd"
        date
        bash -c "$cmd"
        sleep ${TIMER:-1}
    done
    unset cmd
}

function repeat() {
    unset COUNTER
    COUNTER=1
    if [ "$1" = "-n" ]; then
        COUNTER=${2:-1}
        shift
        shift
    fi
    cmd="$@"
    echo "repeat ${COUNTER} times \"${cmd}\""
    for (( i=0; i<$COUNTER; i++ ))
    do
        # command "$cmd"
        bash -c "${cmd}"
    done
}

function extract() {
    unset REMOVE_ARCHIVE
    
    if test "$1" = "-r"; then
        REMOVE=1
        shift
    fi
    if [[ -f $1 ]]; then
        case $1 in
            *.bz2) bunzip $1;;
            *.gz) gunzip $1;;
            *.jar) unzip $1;;
            *.rar) unrar x $1;;
            *.tar.bz2) tar xvjf $1;;
            *.tar.gz) tar xvzf $1;;
            *.tar.xz) tar xvJf $1;;
            *.tar.lzma) tar --lzma -xvf $1;;
            *.tar) tar xvf $1;;
            *.tbz2) tar xvjf $1;;
            *.tgz) tar xvzf $1;;
            *.zip) unzip $1;;
            *.Z) uncompress $1;;
            *.7z) 7z x $1;;
            *) echo "'$1' cannot be extracted via >extract<";;
        esac

        if [[ $REMOVE_ARCHIVE -eq 1 ]]; then
            echo removing "$1";
            /bin/rm "$1";
        fi
    else
        echo "'$1' is not a valid file"
    fi
}

function brew() {
    if [[ "$@" == "update" ]]; then
        local _fixperm=0
        local _brewdir=$(brew --prefix)
        for dir in $(ls -1 $_brewdir); do
            if [ -d "$_brewdir/$dir" ]; then
                local diruname=$(ls -l $_brewdir | grep -w $dir | awk '{print $3}')
                # echo "Dir: $(brew --prefix)/$dir Owner: $diruname"
                if [ "$diruname" != "$(whoami)" ]; then
                    _fixperm=1
                    echo "Incorrect permissions found for $_brewdir/$dir (expected: $(whoami) found: $diruname)"
                fi
            fi
        done
        if [ $_fixperm = 1 ]; then
            echo "Fixing permissions in $_brewdir"
            sudo chown -R $(whoami) $(brew --prefix)/*
        fi
        command brew update
    elif [[ "$@" == "upgrade vim" ]]; then
        echo "brew upgrade vim [custom task]"
        command brew upgrade --build-from-source --with-custom-python --with-lua vim
    elif [[ "$@" == "upgrade macvim" ]]; then
        echo "brew upgrade macvim [custom task]"
        command brew upgrade --build-from-source --with-custom-python --with-lua macvim
    else
        if [[ "$1" == "cask" && "$2" == "upgrade" ]]; then
            echo "brew cask upgrade [custom task]"
            command brew cask uninstall "$3" --force
            command brew cask install "$3" --force
        else
            command brew "$@"
        fi
    fi
}

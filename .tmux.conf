# macOS clipboard
# https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
# <https://github.com/tmux/tmux/issues/543>
set-option -g default-shell $SHELL
set-option -g default-command "/usr/local/bin/reattach-to-user-namespace -l $SHELL"
# https://www.reddit.com/r/neovim/comments/825dj7/the_endless_litany_of_tmux_and_nvim_color_problems/dvc2boh/
# set-option -g default-terminal "screen-256color"
# set -ga terminal-overrides ',screen-256color:Tc'
set -s default-terminal "screen-256color"
set -as terminal-overrides ",*-256color:Tc"

# scrollback
set-option -g history-limit 10000

# start numbering at 1 (easier to navigate using <Prefix>+no)
set -g base-index 1
set -g pane-base-index 1

# Mouse mode
set -g mouse on
setw -g mouse on

set -g set-titles on
set -g set-titles-string "tmux-#S@#h [wnd:#I #W][p:#P]" # Session WindowIndex WindowName HostShort


# MAPPINGS
# prefix rebinding
unbind C-b
# uncomment 2 lines below for C- binding
set -g prefix C-s
bind C-s send-prefix
# uncomment the 2 lines below for C-Space binding
# set -g prefix C-Space
# bind Space send-prefix


# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."


# split: horizontal and vertical panes (easier than <Prefix>% and <Prefix>")
bind % split-window -h -c "#{pane_current_path}"
bind '"' split-window -v -c "#{pane_current_path}"
# bind v split-window -h -c "#{pane_current_path}"
# bind s split-window -v -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"


# CTRL-hjkl pane traversal
# bind C-h select-pane -L
# bind C-j select-pane -D
# bind C-k select-pane -U
# bind C-l select-pane -R

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\\ select-pane -l

# rebing C-L to prefix C-L
# bind C-l send-keys "C-l"

# resize panels
bind J resize-pane -D 5
bind K resize-pane -U 5
bind H resize-pane -L 5
bind L resize-pane -R 5

# VI mode
# Disable wait after escape, so vim is usable
set-option -sg escape-time 0
# set -g status-keys vi
setw -g mode-keys vi # use vim motion keys while in copy mode
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi V send -X select-line
bind-key -T copy-mode-vi C-v send -X rectangle-toggle \; send -X begin-selection
# below are the simple mappings
bind-key -T copy-mode-vi y send -X copy-pipe pbcopy\; display-message "selection copied to system clipboard"
bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel pbcopy\; display-message "selection copied to system clipboard"
bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel pbcopy\; display-message "selection copied to system clipboard"
# I've used mappings below based on https://github.com/tmux/tmux/issues/909
# bind-key -T copy-mode-vi y send -X copy-pipe "/usr/local/bin/reattach-to-user-namespace pbcopy" \; display-message "copied to system clipboard"
# bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "/usr/local/bin/reattach-to-user-namespace pbcopy" \; display-message "copied to system clipboard"
# bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "/usr/local/bin/reattach-to-user-namespace pbcopy" \; display-message "copied to system clipboard"


# THEME
# Solarized reference
# -------------------

# base03    234
# base02    235
# base01    240
# base00    241
# base0     244
# base1     245
# base2     254
# base3     230
# yellow    136
# orange    166
# red       160
# magenta   125
# violet     61
# blue       33
# cyan       37
# green      64
# https://github.com/tony/tmux-config/blob/master/.tmux.conf
# default statusbar colors
# set-option -g status-bg colour240 #colour235:base02 colour240:base01 colour244:base0
# set-option -g status-fg colour136 #yellow
set-option -g status-style bg=colour240,fg=colour136


# default window title colors
#set-window-option -g window-status-fg colour230 #base0
#set-window-option -g window-status-bg colour240
##set-window-option -g window-status-attr dim
set-window-option -g window-status-style bg=colour240,fg=colour230

# active window title colors
# set-window-option -g window-status-current-fg colour166  # colour166 #orange
# set-window-option -g window-status-current-bg colour230
set-window-option -g window-status-current-style bg=colour230,fg=colour166


# pane border
# set-option -g pane-border-fg colour240 #base02
# set-option -g pane-active-border-fg colour166 #base01
set-option -g pane-border-style bg=colour240
set-option -g pane-active-border-style fg=colour166

# pane number display
# set-option -g display-panes-active-colour colour33 #blue
# set-option -g display-panes-colour colour166 #orange

set -g window-status-format '#I:#(pwd="#{pane_current_path}"; echo ${pwd####*/})#F>#W'
set -g window-status-current-format '#I:#(pwd="#{pane_current_path}"; echo ${pwd####*/})#F>#W'
# status
set -g status-left-length 0
set -g status-right-length 140
# set -g status-left '#[fg=colour136,bright]#(whoami)#[fg=color166]@#[fg=colour136,bright]#H â€¢ #[default]'
# set -g status-left ''
# set -g status-right '#[fg=black,bright,bg=default]L:#(sysctl -n vm.loadavg | cut -d " " -f 3) U:#(uptime | cut -f 4-5 -d " " | cut -f 1 -d ",") | %a %l:%M%p %Y-%m-%d'
set -g status-right '#[fg=colour37,bright,bg=default]#(whoami)#[default]#[fg=color136,bright]@#[fg=colour37,bright,bg=default]#h | L:#(sysctl -n vm.loadavg | cut -d " " -f 3) | %a %l:%M%p %Y-%m-%d'

# plugins
# https://github.com/tmux-plugins/tmux-open
set -g @open-S 'https://www.google.com/search?q='
run-shell ~/.tmux/tmux-open/open.tmux

# https://github.com/tmux-plugins/tmux-resurrect
set -g @resurrect-dir '$HOME/.sessions/tmux_resurrect/'
run-shell ~/.tmux/tmux-resurrect/resurrect.tmux

# references:
# https://gist.github.com/rjungemann/77087e7d5a74e872fb733252fd260809
# https://gist.github.com/spicycode/1229612

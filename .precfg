#!/usr/bin/env bash

function cisco_vpn_setup() {
    # https://pdit-document-repository.oraclecorp.com/display/DISG/PDS-DIS+How+to+Configure+Proxy
    # TODO
    # * maven
    if nc -z confluence.oraclecorp.com 80 2>/dev/null; then
        # export {http,https}_proxy=http://www-proxy.us.oracle.com:80
        export {http,https}_proxy=http://www-proxy-hqdc.us.oracle.com:80
        export no_proxy='localhost,127.0.0.1,.oracle.com,.oraclecorp.com,.grungy.us,.docker.io'
        cp -f ~/.ssh/config_ciscovpn ~/.ssh/config
        cp -f ~/.m2/settings.xml.ciscovpn ~/.m2/settings.xml
    else
        unset http_proxy
        unset https_proxy
        unset no_proxy
        cp -f ~/.ssh/config_openvpn ~/.ssh/config
        rm -f ~/.m2/settings.xml
    fi
}
cisco_vpn_setup

function vpnenv() {
    case "$@" in 
        help)
            open "$HOME/Dropbox/dotfiles/docs/vpn.md"
            ;;
        web)
            (
                trap ctrl_c INT

                function ctrl_c() {
                    echo ""
                    echo "...  Untrapping"
                    trap - INT
                    echo "... Stopping gowebserv"
                    kill $(ps ax | grep gowebserv | grep /Public | grep -v grep | awk '{print $1}') && echo "..... killed"
                    echo "... gowebserv stopped"
                    exit
                }
                echo "Starting gowebserv for oraproxy.pac ($(date +%H:%M:%S))"
                while true; do
                    gowebserv -p 8000 $HOME/Public &
                    sleep 180
                    kill $(ps ax | grep gowebserv | grep /Public | grep -v grep | awk '{print $1}')
                    echo "...  restarting ($(date +%H:%M:%S))"
                done
            ) 
            ;;
        kill|killweb)
            (
                # echo "...  Stopping SimpleHTTPServer"
                # kill $(ps ax | grep SimpleHTTPServer | grep -v grep | awk '{print $1}')
                # echo "...  SimpleHTTPServer stopped"
                echo "...  Stopping gowebserv"
                kill $(ps ax | grep gowebserv | grep -v grep | awk '{print $1}')
                echo "...  gowebserv stopped"
            )
            ;;
        *)
            trap ctrl_c INT

            function ctrl_c() {
                echo ""
                echo "...  Untrapping"
                trap - INT
                echo "Shutting down VPN"
                (
                    echo "...  Disabling Automatic Proxy Configuration"
                    confAutoProxy "off"
                )
                # (
                #     # echo "...  Stopping SimpleHTTPServer"
                #     # kill $(ps ax | grep SimpleHTTPServer | grep -v grep | awk '{print $1}')
                #     # echo "...  SimpleHTTPServer stopped"
                #     echo "...  Stopping gowebserv"
                #     kill $(ps ax | grep gowebserv | grep -v grep | awk '{print $1}')
                #     echo "...  gowebserv stopped"
                # )
            }

            function confAutoProxy() {
                IFS=$'\n'
                local autoProxyURL="http://127.0.0.1:8000/oraproxy.pac"
                local wdatURL="http://wpad.dat"
                local autoProxyConfUrl="$autoProxyURL"

                if [ "$1" = "on" ]; then
                    echo "   ... enabling Automatic Proxy Configuration with $autoProxyURL"
                else
                    echo "   ... disabling Automatic Proxy Configuration"
                    autoProxyConfUrl="$wdatURL"
                fi

                echo "        switching auto proxy configuration to $1 with conf $autoProxyConfUrl"

                for i in $(networksetup -listallnetworkservices | tail +2);
                do
                    if [[ $i =~ "Ethernet" ]] || [[ $i =~ "Wi-Fi" ]]; then
                        autoProxyURLLocal=$(networksetup -getautoproxyurl "$i" | head -1 | cut -c 6- )
                        if [ "$autoProxyURLLocal" != "$autoProxyConfUrl" ]; then
                            sudo networksetup -setautoproxyurl "$i" "$autoProxyConfUrl"
                            echo "Set auto proxy conf for $i to $autoProxyConfUrl (from $autoProxyURLLocal)"
                        fi
                        if [ "$1" = "on" ]; then
                            sudo networksetup -setautoproxystate "$i" on
                        else
                            sudo networksetup -setautoproxystate "$i" off
                        fi

                    fi
                done
                # if [ "$1" = "on" ]; then
                #     echo "   ... enabling Automatic Proxy Configuration with $autoProxyURL"
                #     for i in $(networksetup -listallnetworkservices | tail +2);
                #     do
                #         if [[ $i =~ "Ethernet" ]] || [[ $i =~ "Wi-Fi" ]]; then
                #             autoProxyURLLocal=$(networksetup -getautoproxyurl "$i" | head -1 | cut -c 6- )
                #             if [ "$autoProxyURL" != "$autoProxyURLLocal" ]; then
                #                 networksetup -setautoproxyurl "$i" "$autoProxyURL"
                #                 echo "Set auto proxy for $i to $autoProxyURL (from $autoProxyURLLocal)"
                #             fi
                #             networksetup -setautoproxystate "$i" on
                #         fi
                #     done
                # else
                #     echo "   ...  disabling Automatic Proxy Configuration"
                #     for i in $(networksetup -listallnetworkservices | tail +2);
                #     do
                #         if [[ $i =~ "Ethernet" ]] || [[ $i =~ "Wi-Fi" ]]; then
                #             networksetup -setautoproxystate "$i" off
                #         fi
                #     done
                # fi

                unset IFS
            }
            (
                echo "Enabling Automatic Proxy Configuration"
                confAutoProxy "on"
            ) 
            # (
            #     # echo "Starting SimpleHTTPServer for oraproxy.pac"
            #     # cd $HOME/Public && python -m SimpleHTTPServer &> /dev/null
            #     echo "Starting gowebserv for oraproxy.pac"
            #     gowebserv -p 8000 $HOME/Public
            # ) &
            (
                echo "Starting VPN"
                openconnect --script-tun --script "ocproxy -D 8912" https://myaccess.oraclevpn.com
            )
            # wait %1
            ;;
    esac
}
alias brewrepair='sudo chown -R $(whoami) /usr/local/bin /usr/local/lib'
 

#!/usr/bin/env bash

export VIM_APP_DIR=/Applications/m

# Set to 1 if using the CORP VPN; 0 for OCNA VPN
CORP_VPN=0

###################################################################
# This script will set proxy env variables if within Oracle Network
# using the CORP VPN
###################################################################
function corp_vpn_setup() {
    # https://pdit-document-repository.oraclecorp.com/display/DISG/PDS-DIS+How+to+Configure+Proxy
    # TODO
    # * maven
    ORACLE_NETWORK="netstat -nr | grep 2606:b400"
    # if [ -n "$(eval "$ORACLE_NETWORK")" ]; then
    if nc -w 3 -z confluence.oraclecorp.com 80 2>/dev/null; then
        # export {http,https}_proxy=http://www-proxy.us.oracle.com:80
        export {HTTP,HTTPS}_PROXY=http://www-proxy-hqdc.us.oracle.com:80;
        export {http,https}_proxy=http://www-proxy-hqdc.us.oracle.com:80
        export NO_PROXY=localhost,127.0.0.1,169.254/16,10.0.0.*,192.168.99.*,/var/run/docker.sock,.us.oracle.com,.oracle.com,.oraclecorp.com,.grungy.us,.local
        export no_proxy=localhost,127.0.0.1,169.254/16,10.0.0.*,192.168.99.*,/var/run/docker.sock,.us.oracle.com,.oracle.com,.oraclecorp.com,.grungy.us,.local
        cp -f ~/.ssh/config_ciscovpn ~/.ssh/config
        cp -f ~/.m2/settings.xml.oci ~/.m2/settings.xml
        echo "Inside network (proxies, config_ciscovpn, settings.xml.oci)"
    else
        reset_corp_vpn_setup
    fi
}

function reset_corp_vpn_setup() {
    unset http_proxy
    unset https_proxy
    unset no_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset NO_PROXY
    # cp -f ~/.ssh/config_openvpn ~/.ssh/config
    # rm -f ~/.m2/settings.xml
    cp -f ~/.ssh/config_ocnavpn ~/.ssh/config
    cp -f ~/.m2/settings.xml.ocna ~/.m2/settings.xml
    echo "Outside network (no proxy, settings.xml.ocna, config_ocnavpn)"
}

if [ $CORP_VPN -eq 1 ]; then
    corp_vpn_setup
else
    reset_corp_vpn_setup
fi

function savecpu() {
    echo "Before running:"
    ps ax | grep VShield
    sudo /usr/local/McAfee/AntiMalware/VSControl stop
    sudo /usr/local/McAfee/AntiMalware/VSControl stopoas
    echo "After:"
    ps ax | grep VShield
    echo "DONE"
}

alias oraproxy='env ALL_PROXY=socks5h://localhost:8912'
alias brewrepair='sudo chown -R $(whoami) /usr/local/bin /usr/local/lib'

function vpnenv() {
    case "$@" in 
        help)
            open "$HOME/Dropbox/dotfiles/docs/vpn.md"
            ;;
        web)
            (
                trap ctrl_c INT

                function ctrl_c() {
                    echo ""
                    echo "...  Untrapping"
                    trap - INT
                    echo "... Stopping gowebserv"
                    kill $(ps ax | grep gowebserv | grep /Public | grep -v grep | awk '{print $1}') && echo "..... killed"
                    echo "... gowebserv stopped"
                    exit
                }
                echo "Starting gowebserv for oraproxy.pac ($(date +%H:%M:%S))"
                while true; do
                    gowebserv -p 8000 $HOME/Public &
                    sleep 180
                    kill $(ps ax | grep gowebserv | grep /Public | grep -v grep | awk '{print $1}')
                    echo "...  restarting ($(date +%H:%M:%S))"
                done
            ) 
            ;;
        kill|killweb)
            (
                # echo "...  Stopping SimpleHTTPServer"
                # kill $(ps ax | grep SimpleHTTPServer | grep -v grep | awk '{print $1}')
                # echo "...  SimpleHTTPServer stopped"
                echo "...  Stopping gowebserv"
                kill $(ps ax | grep gowebserv | grep -v grep | awk '{print $1}')
                echo "...  gowebserv stopped"
            )
            ;;
        *)
            trap ctrl_c INT

            function ctrl_c() {
                echo ""
                echo "...  Untrapping"
                trap - INT
                echo "Shutting down VPN"
                (
                    echo "...  Disabling Automatic Proxy Configuration"
                    confAutoProxy "off"
                )
                # (
                #     # echo "...  Stopping SimpleHTTPServer"
                #     # kill $(ps ax | grep SimpleHTTPServer | grep -v grep | awk '{print $1}')
                #     # echo "...  SimpleHTTPServer stopped"
                #     echo "...  Stopping gowebserv"
                #     kill $(ps ax | grep gowebserv | grep -v grep | awk '{print $1}')
                #     echo "...  gowebserv stopped"
                # )
            }

            function confAutoProxy() {
                IFS=$'\n'
                local autoProxyURL="http://127.0.0.1:8000/oraproxy.pac"
                local wdatURL="http://wpad.dat"
                local autoProxyConfUrl="$autoProxyURL"

                if [ "$1" = "on" ]; then
                    echo "   ... enabling Automatic Proxy Configuration with $autoProxyURL"
                else
                    echo "   ... disabling Automatic Proxy Configuration"
                    autoProxyConfUrl="$wdatURL"
                fi

                echo "        switching auto proxy configuration to $1 with conf $autoProxyConfUrl"

                for i in $(networksetup -listallnetworkservices | tail +2);
                do
                    if [[ $i =~ "Ethernet" ]] || [[ $i =~ "Wi-Fi" ]]; then
                        autoProxyURLLocal=$(networksetup -getautoproxyurl "$i" | head -1 | cut -c 6- )
                        if [ "$autoProxyURLLocal" != "$autoProxyConfUrl" ]; then
                            sudo networksetup -setautoproxyurl "$i" "$autoProxyConfUrl"
                            echo "Set auto proxy conf for $i to $autoProxyConfUrl (from $autoProxyURLLocal)"
                        fi
                        if [ "$1" = "on" ]; then
                            sudo networksetup -setautoproxystate "$i" on
                        else
                            sudo networksetup -setautoproxystate "$i" off
                        fi

                    fi
                done
                # if [ "$1" = "on" ]; then
                #     echo "   ... enabling Automatic Proxy Configuration with $autoProxyURL"
                #     for i in $(networksetup -listallnetworkservices | tail +2);
                #     do
                #         if [[ $i =~ "Ethernet" ]] || [[ $i =~ "Wi-Fi" ]]; then
                #             autoProxyURLLocal=$(networksetup -getautoproxyurl "$i" | head -1 | cut -c 6- )
                #             if [ "$autoProxyURL" != "$autoProxyURLLocal" ]; then
                #                 networksetup -setautoproxyurl "$i" "$autoProxyURL"
                #                 echo "Set auto proxy for $i to $autoProxyURL (from $autoProxyURLLocal)"
                #             fi
                #             networksetup -setautoproxystate "$i" on
                #         fi
                #     done
                # else
                #     echo "   ...  disabling Automatic Proxy Configuration"
                #     for i in $(networksetup -listallnetworkservices | tail +2);
                #     do
                #         if [[ $i =~ "Ethernet" ]] || [[ $i =~ "Wi-Fi" ]]; then
                #             networksetup -setautoproxystate "$i" off
                #         fi
                #     done
                # fi

                unset IFS
            }
            (
                echo "Enabling Automatic Proxy Configuration"
                confAutoProxy "on"
            ) 
            # (
            #     # echo "Starting SimpleHTTPServer for oraproxy.pac"
            #     # cd $HOME/Public && python -m SimpleHTTPServer &> /dev/null
            #     echo "Starting gowebserv for oraproxy.pac"
            #     gowebserv -p 8000 $HOME/Public
            # ) &
            (
                echo "Starting VPN"
                openconnect --script-tun --script "ocproxy -D 8912" https://myaccess.oraclevpn.com
            )
            # wait %1
            ;;
    esac
}
 
##########################################################################################
# This tool allows openconnect to be started, stopped or get its status against Oracle VPN in a
# MAC environment. For usage information, see help for more details (openconnect.sh help).
# This is an alternative to Cisco AnyConnect and works exactly similar except that it does not
# put restriction on 192.168.* IP addresses like what the latter is doing making tools like
# Minikube to fail. When started, the tool also adds PAC proxy to the interface created by
# openconnect so other tools that require system proxy such as Safari, Slack, Zoom, Chrome, etc.
# will continue to function.
#
# Author: Keith Lustria
###########################################################################################

#Customize VPN connect details
VPN_HOST="myaccess.oraclevpn.com"
VPN_USERNAME="alexandp_us"

# Customize Proxy Information
PROXY_AUTO_CONFIG_URL="http://wpad/wpad.dat"
PROXY_EXCEPTION_LIST="127.0.0.1 *.local localhost 169.254/16 10.0.0.* 192.168.99.* /var/run/docker.sock .oracle.com .us.oracle.com .oraclecorp.com .grungy.us"

# Specify where openconnect binary exists
OPENCONNECT="/usr/local/bin/openconnect"

# Check if VPN is online
function _openconnectVPNConnected()
{
    OPENCONNECT_RUNNING=$(ps -aef | grep $OPENCONNECT | grep -v grep)
    INTERFACE_CREATED=$(echo 'list State:/Network/Service/utun[0-9]+/DNS' | scutil)

    if [ -n "$OPENCONNECT_RUNNING" ] && [[ "$INTERFACE_CREATED" == *"utun"* ]]; then
        return 0
    else
        return 1
    fi
}

# Start openconnect and apply PAC proxy to the created interface
function _openconnectStart()
{
    # unset proxy values if there is any
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset http_proxy
    unset https_proxy
    unset NO_PROXY
    unset no_proxy

    # stop any running open connect vpn first
    _openconnectStop

    PASSWD_ON_STDIN=""
    if [ -n "$1" ]; then
        PASSWD_ON_STDIN="--passwd-on-stdin"
    fi

    sudo $OPENCONNECT -b $PASSWD_ON_STDIN -u $VPN_USERNAME $VPN_HOST
    if [ $? -eq 0 ]; then
        elapsedTime=0
        until _openconnectVPNConnected; do
            sleep 1
            elapsedTime=$((elapsedTime+1))
            # break after 10 seconds
            if [ "$elapsedTime" -ge 10 ]; then break; fi
        done
        _openconnectSetProxy
    fi
}

# Stop openconnect and clean up all interface related settings.
function _openconnectStop()
{
    sudo pkill openconnect

    REMOVE_RECORD_CMD=""
    REMOVE_RECORD_MSG="RECORDS REMOVED:\n"
    # PATTERNS=( "State:/Network/Service/utun[0-9]+/DNS" "State:/Network/Service/utun[0-9]+/IPv4" "State:/Network/Service/utun[0-9]+/Proxies" )
    PATTERNS=( "State:/Network/Service/utun[0-9]+/DNS" "State:/Network/Service/utun[0-9]+/IPv4" "State:/Network/Service/utun[0-9]+/Proxies" "State:/Network/Interface/utun[0-9]/IPv4" "State:/Network/Interface/utun[0-9]/IPv6")
    for PATTERN in "${PATTERNS[@]}"
    do
        RECORDS=$(echo "list $PATTERN" | scutil)
        for RECORD in `echo $RECORDS`; do
            if [[ "$RECORD" =~ "State" ]]; then
                REMOVE_RECORD_CMD="${REMOVE_RECORD_CMD}remove $RECORD \n"
                REMOVE_RECORD_MSG="${REMOVE_RECORD_MSG}$RECORD \n"
                echo "Removing: $RECORD"
                echo "remove $RECORD" | sudo scutil
                echo "Removed : $RECORD $?"
            fi
        done
    done

    if [ -n "$REMOVE_RECORD_CMD" ]; then
        printf "$REMOVE_RECORD_MSG"
        # printf "$REMOVE_RECORD_CMD" | sudo scutil
    fi
}

# Set PAC Proxy to openconnect created interface
function _openconnectSetProxy()
{
    IFACE=$(echo 'list State:/Network/Service/utun[0-9]+/DNS' | scutil | cut -d/ -f4)
    if [ -n "$IFACE" ]; then
        echo Setting Proxy for $IFACE
        eval "sudo scutil <<EOF
            open
            d.init
            d.add ExceptionsList $PROXY_EXCEPTION_LIST
            d.add ProxyAutoConfigEnable # 1
            d.add ProxyAutoConfigURLString $PROXY_AUTO_CONFIG_URL
            d.add HTTPEnable # 0
            d.add HTTPSEnable # 0
            d.add SocksEnable # 0
            set State:/Network/Service/$IFACE/Proxies
            close
            quit
        EOF"
    fi
}

# Display usage information for this tool.
function _displayHelp()
{
    echo "Usage: vpnconnect {start|stop|status|help} [start Option] "
    echo
    echo "   start            starts openconnect"
    echo "   stop             stops openconnect"
    echo "   status           returns 0 if openconnect was succesfully started or 1 if not"
    echo
    echo "   start Option     Only allowed for start command. If not set, opeconnect will prompt for a password."
    echo "                    Otherwise if set to any value, openconnect expects password from STDIN."
}

function vpnconnect()
{
    # Main routine
    case "$1" in
        stop)
            _openconnectStop
            cisco_vpn_setup
            if [ -n "$TMUX" ]; then
                tmux rename-window 'VPN-OFF'
            fi
            ;;
        status)
            _openconnectVPNConnected
            return $?
            # exit $?
            ;;
        help)
            _displayHelp
            ;;
        *)
            # Start openconnect if argument is empty or contains "start"
            if [ -z "$1" -o "$1" == "start" ]; then
                _openconnectStart $2
                cisco_vpn_setup
                if [ -n "$TMUX" ]; then
                    tmux rename-window 'VPN-ON'
                fi
            fi
            ;;
    esac
}
